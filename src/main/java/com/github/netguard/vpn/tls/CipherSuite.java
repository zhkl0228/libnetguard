package com.github.netguard.vpn.tls;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public enum CipherSuite {

    TLS_RSA_WITH_RC4_128_MD5(0x0004),
    TLS_RSA_WITH_RC4_128_SHA(0x0005),
    TLS_RSA_WITH_IDEA_CBC_SHA(0x0007),
    TLS_RSA_WITH_3DES_EDE_CBC_SHA(0x000a),
    TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA(0x000d),
    TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA(0x0010),
    TLS_DHE_DSS_WITH_DES_CBC_SHA(0x0013),
    TLS_DHE_RSA_WITH_DES_CBC_SHA(0x0016),
    TLS_DH_RSA_WITH_AES_256_GCM_SHA384(0x00a1),
    TLS_DHE_DSS_WITH_AES_256_GCM_SHA384(0x00a3),
    TLS_DH_DSS_WITH_AES_256_GCM_SHA384(0x00a5),
    TLS_RSA_WITH_AES_128_CBC_SHA(0x002f),
    TLS_DH_DSS_WITH_AES_128_CBC_SHA(0x0030),
    TLS_DH_RSA_WITH_AES_128_CBC_SHA(0x0031),
    TLS_DHE_DSS_WITH_AES_128_CBC_SHA(0x0032),
    TLS_DHE_RSA_WITH_AES_128_CBC_SHA(0x0033),
    TLS_RSA_WITH_AES_256_CBC_SHA(0x0035),
    TLS_DH_DSS_WITH_AES_256_CBC_SHA(0x0036),
    TLS_DH_RSA_WITH_AES_256_CBC_SHA(0x0037),
    TLS_DHE_DSS_WITH_AES_256_CBC_SHA(0x0038),
    TLS_DHE_RSA_WITH_AES_256_CBC_SHA(0x0039),
    TLS_RSA_WITH_AES_128_CBC_SHA256(0x003c),
    TLS_RSA_WITH_AES_256_CBC_SHA256(0x003d),
    TLS_DH_DSS_WITH_AES_128_CBC_SHA256(0x003e),
    TLS_DH_RSA_WITH_AES_128_CBC_SHA256(0x003f),
    TLS_DHE_DSS_WITH_AES_128_CBC_SHA256(0x0040),
    TLS_RSA_WITH_CAMELLIA_128_CBC_SHA(0x0041),
    TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA(0x0042),
    TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA(0x0043),
    TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA(0x0044),
    TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA(0x0045),
    TLS_DHE_RSA_WITH_AES_128_CBC_SHA256(0x0067),
    TLS_DH_DSS_WITH_AES_256_CBC_SHA256(0x0068),
    TLS_DH_RSA_WITH_AES_256_CBC_SHA256(0x0069),
    TLS_DHE_DSS_WITH_AES_256_CBC_SHA256(0x006a),
    TLS_DHE_RSA_WITH_AES_256_CBC_SHA256(0x006b),
    TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA(0x0085),
    TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA(0x0086),
    TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA(0x0087),
    TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA(0x0088),
    TLS_RSA_WITH_SEED_CBC_SHA(0x0096),
    TLS_DH_DSS_WITH_SEED_CBC_SHA(0x0097),
    TLS_DH_RSA_WITH_SEED_CBC_SHA(0x0098),
    TLS_DHE_DSS_WITH_SEED_CBC_SHA(0x0099),
    TLS_DHE_RSA_WITH_SEED_CBC_SHA(0x009a),
    TLS_RSA_WITH_AES_128_GCM_SHA256(0x009c),
    TLS_RSA_WITH_AES_256_GCM_SHA384(0x009d),
    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256(0x009e),
    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384(0x009f),
    TLS_DH_RSA_WITH_AES_128_GCM_SHA256(0x00a0),
    TLS_DHE_DSS_WITH_AES_128_GCM_SHA256(0x00a2),
    TLS_DH_DSS_WITH_AES_128_GCM_SHA256(0x00a4),
    TLS_EMPTY_RENEGOTIATION_INFO_SCSV(0x00ff),
    TLS_AES_128_GCM_SHA256(0x1301),
    TLS_AES_256_GCM_SHA384(0x1302),
    TLS_CHACHA20_POLY1305_SHA256(0x1303),
    TLS_ECDH_ECDSA_WITH_RC4_128_SHA(0xc002),
    TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA(0xc003),
    TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA(0xc004),
    TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA(0xc005),
    TLS_ECDHE_ECDSA_WITH_RC4_128_SHA(0xc007),
    TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA(0xc008),
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA(0xc009),
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA(0xc00a),
    TLS_ECDH_RSA_WITH_RC4_128_SHA(0xc00c),
    TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA(0xc00d),
    TLS_ECDH_RSA_WITH_AES_128_CBC_SHA(0xc00e),
    TLS_ECDH_RSA_WITH_AES_256_CBC_SHA(0xc00f),
    TLS_ECDHE_RSA_WITH_RC4_128_SHA(0xc011),
    TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA(0xc012),
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA(0xc013),
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA(0xc014),
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256(0xc023),
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384(0xc024),
    TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256(0xc025),
    TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384(0xc026),
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256(0xc027),
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384(0xc028),
    TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256(0xc029),
    TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384(0xc02a),
    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256(0xc02b),
    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384(0xc02c),
    TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256(0xc02d),
    TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384(0xc02e),
    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256(0xc02f),
    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384(0xc030),
    TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256(0xc031),
    TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384(0xc032),
    TLS_RSA_WITH_CAMELLIA_256_CBC_SHA(0x0084),
    TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256(0xcca8),
    TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256(0xcca9),
    TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256(0xccaa)
    ;

    private static final Logger log = LoggerFactory.getLogger(CipherSuite.class);

    private static final Map<Integer, CipherSuite> CIPHER_SUITES;
    static {
        CipherSuite[] values = CipherSuite.values();
        Map<Integer, CipherSuite> cipherSuites = new HashMap<>(values.length);
        for(CipherSuite cipherSuite : values) {
            cipherSuites.put(cipherSuite.value, cipherSuite);
        }
        CIPHER_SUITES = Collections.unmodifiableMap(cipherSuites);
    }

    private final int value;

    CipherSuite(int value) {
        this.value = value;
    }

    public static CipherSuite valueOf(int value) {
        CipherSuite cipherSuite = CIPHER_SUITES.get(value);
        if (cipherSuite == null && log.isDebugEnabled()) {
            log.debug("Unknown cipher suite value {}", String.format("0x%04x", value));
        }
        return cipherSuite;
    }

}
